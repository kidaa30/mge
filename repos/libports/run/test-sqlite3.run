build "core init drivers/timer test/sqlite3 server/lx_fs"

assert_spec linux

requires_installation_of sqlite3

create_boot_directory

install_config {
<config>
	<parent-provides>
		<service name="ROM"/>
		<service name="RAM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="CAP"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
		<service name="SIGNAL"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<start name="lx_fs">
		<resource name="RAM" quantum="4M"/>
		<provides><service name="File_system"/></provides>
		<config>
			<content>
			</content>
			<policy label="" root="/fs" writeable="yes"/>
		</config>
	</start>
	<start name="timer">
		<resource name="RAM" quantum="2M"/>
		<provides><service name="Timer"/></provides>
	</start>
	<start name="test-sqlite3">
		<resource name="RAM" quantum="2M"/>
		<config>
			<libc stdin="/dev/null" stdout="/dev/log" stderr="/dev/log">
				<vfs>
					<dir name="dev"> <log/> <null/> </dir>
					<fs />
				</vfs>
			</libc>
		</config>
	</start>
</config>
}

exec mkdir -p bin/fs

build_boot_image {
	core init test-sqlite3
	ld.lib.so libc.lib.so
	lx_fs libc_fs.lib.so
	libc_log.lib.so
	fs
	timer
}

append qemu_args " -nographic -m 64 "

run_genode_until {.*child exited with exit value 0.*} 10

set result [exec sqlite3 bin/fs/test.sqlite "SELECT * FROM Testing;"]
if {[expr $result == 3 ]} {
	puts "\nTest succeeded\n"
} else {
	puts "\nTest failed\n"
}

exec rm -r bin/fs

# vi: set ft=tcl :

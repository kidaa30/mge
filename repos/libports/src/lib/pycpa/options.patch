+++ pycpa/pycpa/options.py	2014-11-06 18:09:48.000000000 +0100
@@ -7,6 +7,7 @@
 :Authors:
          - Jonas Diemer
          - Philip Axer
+Modified by Robin Hofmann
 
 Description
 -----------
@@ -28,7 +29,7 @@ EPSILON = 1e-12
 MAX_ERRORS = 10
 INFINITY = float('inf')
 
-import argparse
+#import argparse
 import logging
 import sys
 
@@ -40,7 +41,7 @@ propagation_methods = sorted([b'jitter_o
                        b'jitter',
                        b'jitter_bmin',
                        b'optimal'])
-
+'''
 parser = argparse.ArgumentParser(description='Scheduling Analysis')
 parser.add_argument('--max_iterations', type=int,
                     default=MAX_ITERATIONS,
@@ -62,13 +63,14 @@ parser.add_argument('--verbose', '-v', a
                     help='be more talkative')
 parser.add_argument('--debug', '-d', action='store_true',
                     help='print debug messages')
-
+'''
 
 
 welcome = "pyCPA - Compositional Performance Analysis in Python.\n\n" \
 + 'Version ' + __version__ + '\n' + __license_text__
 
 _opts = None
+_opts_replace = None	##the one to replace the original access
 _opts_dict = None
 
 
@@ -76,16 +78,34 @@ def get_opt(option):
     """ Returns the option specified by the parameter.
     If called for the first time, the parsing is done.
     """
+    #print ("[options] Called get_opt() with", option)
+
+    global _opts_dict
+    if _opts_dict is None: init_pycpa_replace()
+    return _opts_dict.get(option)
+
+    global _opts_replace
+    if _opts_replace is None: init_pycpa_replace()
+    return _opts_replace.get(option)
+    '''
     global _opts
     if _opts is None: init_pycpa(implicit=True)
     return getattr(_opts, option)
+    '''
 
 def set_opt(option, value):
     """ Sets the option specified by the parameter to value.
     If called for the first time, the parsing is done.
     """
+    print ("[options] Called set_opt() with", option, "->", value)
+
+    global _opts_dict
+    if _opts_dict is None: init_pycpa_replace()
+    _opts_dict[option] = value
+    return
+
     global _opts
-    if _opts is None: init_pycpa(implicit=True)
+    if _opts is None: init_pycpa_replace(implicit=True)
     setattr(_opts, option, value)
 
 def pprintTable(out, table, column_sperator="", header_separator=":"):
@@ -120,6 +140,65 @@ def pprintTable(out, table, column_spera
 
     return
 
+def init_pycpa_replace():
+    """
+    Like the original one this method initialises the options dictionary, just with default values
+    """
+    
+
+    global _opts_replace, _opts_dict
+    _opts_dict = dict()
+
+    '''set default values'''
+    _opts_dict["debug"] = False
+    _opts_dict["show"] = False
+    _opts_dict["verbose"] = False
+    _opts_dict["propagation"] = "busy_window"
+    _opts_dict["nocaching"] = False 
+    _opts_dict["max_iterations"] = MAX_ITERATIONS
+    _opts_dict["max_wcrt"] = MAX_WCRT
+    _opts_dict["check_violations"] = False ##???
+    _opts_dict["e2e_improved"] = False  ##False
+
+    return
+
+    if not implicit:
+        # in this case we are explicitly initialized,
+        # output welcome and consume cmdline parameters
+        print (welcome)
+        print ("invoked via: " + " ".join(sys.argv) + "\n")
+
+        _opts = parser.parse_args()
+    else:
+        # implicit init, through regression test or non-pycpa script
+        # distill defaults and arguments from the parser and pretend nothing happend
+        _opts = argparse.Namespace()
+        for action in parser._actions:
+            if action.default == argparse.SUPPRESS:
+                continue
+            setattr(_opts, action.dest, action.default)
+# table of selected paramters
+
+    table = list()
+    for attr in dir(_opts):
+        if not attr.startswith("_"):
+            row = ["%s" % attr, str(getattr(_opts, attr))]
+            _opts_dict[attr] = str(getattr(_opts, attr))
+            table.append(row)
+    if not implicit:
+        pprintTable(sys.stdout, table)
+        print("\n\n")
+    # set up the general logging object
+
+    log_format = "%(levelname)s: %(message)s"
+    if get_opt('debug'):
+        logging.basicConfig(level=logging.DEBUG, format=log_format)
+    elif get_opt('verbose'):
+        logging.basicConfig(level=logging.INFO, format=log_format)
+    else:
+        logging.basicConfig(level=logging.WARNING, format=log_format)
+
+
 def init_pycpa(implicit=False):
     """ Initialize pyCPA.
     This function parses the options and prints them for reference.
@@ -168,4 +247,3 @@ def init_pycpa(implicit=False):
 
 
 
-# vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4
